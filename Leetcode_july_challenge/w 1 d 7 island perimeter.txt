class Solution {
public:
    int m,n;
    int findit( vector<vector<int>>& grid,vector<vector<int>>& visited, int i, int j ){
        visited[i][j] = 1;
        int kl = 0;
        int temp = 0;
        if(i + 1 < m && grid[i+1][j] == 1 ){
            kl++;
            if(!visited[i+1][j])
                temp += findit(grid,visited,i+1,j);
        }
        if(i - 1 >= 0 && grid[i-1][j] == 1 ){
            kl++;
            if(!visited[i-1][j])
                temp += findit(grid,visited,i-1,j);
        }
        if(j + 1 < n && grid[i][j+1] == 1 ){
            kl++;
            if( !visited[i][j+1] )
                temp += findit(grid,visited,i,j+1);
        }
        if(j - 1 >= 0 && grid[i][j-1] == 1 ){
            kl++;
            if( !visited[i][j-1] )
                temp += findit(grid,visited,i,j-1);
        }
        int result = temp + 4 - kl;
        return result;
    }
    int islandPerimeter(vector<vector<int>>& grid) {
        vector<vector<int>> visited(grid.size(), vector<int>(grid[0].size(),0) );
        int result = 0;
        m = grid.size();
        n = grid[0].size();
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size(); j++){
                if(grid[i][j] == 1 && !visited[i][j] ){
                    int temp = findit(grid,visited,i,j );
                    if(result < temp)
                        result = temp;
                }
                
            }
        }
        return result;
    }
};