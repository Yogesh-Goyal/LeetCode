#include<unordered_map>
#include<bits/stdc++.h>
struct hash_pair { 
    template <class T1, class T2> 
    size_t operator()(const pair<T1, T2>& p) const
    { 
        auto hash1 = hash<T1>{}(p.first); 
        auto hash2 = hash<T2>{}(p.second); 
        return hash1 ^ hash2; 
    } 
}; 
#include <utility> 
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        unordered_map<int,int> m;
        unordered_map<pair<int, int>, int, hash_pair> m1; 
        for(int i = 0; i < nums.size(); i++){
            m[nums[i]] = i;
        }
        vector<vector<int> > result;
        for(int i = 0; i < nums.size(); i++){
            for(int j = i+1; j < nums.size(); j++){
                int req = 0 - nums[i]-nums[j];
                int small = min(nums[i], min(req,nums[j]) );
                int large = max(nums[i], max(req,nums[j]) );
                pair<int,int> p1;
                p1.first = small;
                p1.second = large;
                if( m[req] > i && m[req] > j ){
                    if(m1.count(p1) == 0){
                            vector<int> temp;
                            temp.push_back(nums[i]);
                            temp.push_back(nums[j]);
                            temp.push_back(req);
                            sort(temp.begin(),temp.end());
                            result.push_back(temp);
                            m1[p1] = req;
                    }
                }
            }            
        }
        sort(result.begin(),result.end());
        return result;
    }
};