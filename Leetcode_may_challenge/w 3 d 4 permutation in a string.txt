#include<unordered_map>
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        if( s2.length() < s1.length() )
            return false;
        unordered_map<char,int> m1;
        unordered_map<char,int> m2;
        for(int i = 0; s1[i] != '\0'; i++)
        {
            m1[s1[i] - 'a']++;
            m2[s2[i] - 'a']++;
        }
        unordered_map<char,int>:: iterator it = m2.begin();
        int fg = 0;
        while( it != m2.end() ){
                if( m1[it->first] != m2[it->first] ){
                    fg = 1;
                    break;
                }
                    it++;
            }
        if(fg == 0){
            return true;
        }
        for(int i = s1.length(); s2[i] != '\0'; i++)
        {
            ++m2[ s2[i]-'a' ];
            --m2[ s2[i - s1.length() ] - 'a'];
            unordered_map<char,int>:: iterator it = m2.begin();
            int fg = 0;
            while( it != m2.end() ){
                if( m1[it->first] != m2[it->first] ){
                    fg = 1;
                    break;
                }
                    it++;
            }
            if(fg == 0){
                return true;
            }
        }
        return false;
    }
};