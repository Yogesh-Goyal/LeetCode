#include<queue>
#include <utility> 
#include<unordered_map>
class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        unordered_map< long int, vector<int> > m1;
        priority_queue<long int, vector<long int>, greater<long int> > p;  
        for(int i = 0; i < points.size(); i++){
            long int temp = pow( points[i][0], 2 ) + pow( points[i][1], 2 );
            m1[temp].push_back(points[i][0]);
            m1[temp].push_back(points[i][1]);
            p.push(temp);
        }
        vector< vector<int> > result;
        for(int i = 0; i < K; i++){
            long int temp = p.top();
            p.pop();
            vector<int> im = m1[temp];
            while( im.size() != 0){
                vector<int> kl;
                int p1 = im.back();
                im.pop_back();
                int p2 = im.back();
                im.pop_back();
                kl.push_back(p2);
                kl.push_back(p1);
                result.push_back(kl);
            }
            m1[temp] = im;
        }
        return result;
    }
};