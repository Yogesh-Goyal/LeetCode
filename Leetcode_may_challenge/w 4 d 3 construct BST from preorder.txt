/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
#include<vector>
class Solution {
public:
    TreeNode* constr(vector<int>& preorder, int si, int ei){
        if(si>ei){
            return NULL;
        }
        int front = preorder[si];
        TreeNode* result = new TreeNode( front );
        if(si == ei){
            return result;
        }
        int x = -1;
        for(int i = si+1; i <= ei; i++){
            if( preorder[i] > front ){
                x = i;
                break;
            }
        }
        if(x !=  si + 1 || x == -1){
            if(x == -1){
                result->left = constr( preorder, si + 1, ei);    
            }
            else{
                result->left = constr( preorder, si + 1, x - 1);
            }
        }
        else{
            result->left = NULL;
        }
        if(x != -1 ){
            result->right = constr( preorder, x, ei);
        }
        else{
            result->right = NULL;
        }
        return result;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        TreeNode* result = new TreeNode();
        int size = preorder.size();
        result = constr(preorder, 0, size - 1 );
        return result;
    }
};